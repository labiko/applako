/**
 * Script pour cr√©er une p√©riode en cours et les donn√©es de test
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://nmwnibzgvwltipmtwhzo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5td25pYnpndndsdGlwbXR3aHpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODY5MDMsImV4cCI6MjA2ODc2MjkwM30.cmOT0pwKr0T7DyR7FjF9lr2Aea3A3OfOytEfhi0GQ4U';

const supabase = createClient(supabaseUrl, supabaseKey);

async function createPeriodAndData() {
  try {
    console.log('üéØ Cr√©ation p√©riode et donn√©es de test...\n');

    // 1. Cr√©er une nouvelle p√©riode en cours
    const now = new Date();
    const periodeDebut = new Date(now.getFullYear(), now.getMonth(), 1); // D√©but du mois
    const periodeFin = new Date(now.getFullYear(), now.getMonth() + 1, 0); // Fin du mois

    console.log('üìÖ Cr√©ation de la p√©riode en cours...');
    
    const { data: nouvellePeriode, error: periodeError } = await supabase
      .from('facturation_periodes')
      .insert([{
        periode_debut: periodeDebut.toISOString(),
        periode_fin: periodeFin.toISOString(),
        statut: 'en_cours',
        total_commissions: 0,
        total_facture: 0,
        nombre_entreprises: 0
      }])
      .select()
      .single();

    if (periodeError) {
      console.log('‚ùå Erreur cr√©ation p√©riode:', periodeError.message);
      
      // Essayer de r√©cup√©rer une p√©riode existante
      const { data: existingPeriode } = await supabase
        .from('facturation_periodes')
        .select('*')
        .order('periode_debut', { ascending: false })
        .limit(1)
        .single();
      
      if (existingPeriode) {
        // Remettre en statut en_cours si n√©cessaire
        await supabase
          .from('facturation_periodes')
          .update({ statut: 'en_cours' })
          .eq('id', existingPeriode.id);
        
        console.log(`‚úÖ Utilisation p√©riode existante: ${new Date(existingPeriode.periode_debut).toLocaleDateString('fr-FR')}`);
        var periodeEnCours = { ...existingPeriode, statut: 'en_cours' };
      } else {
        console.log('‚ùå Impossible de cr√©er ou trouver une p√©riode');
        return;
      }
    } else {
      console.log(`‚úÖ P√©riode cr√©√©e: ${new Date(nouvellePeriode.periode_debut).toLocaleDateString('fr-FR')} - ${new Date(nouvellePeriode.periode_fin).toLocaleDateString('fr-FR')}`);
      var periodeEnCours = nouvellePeriode;
    }

    // 2. R√©cup√©rer le conducteur cr√©√© pr√©c√©demment
    const entrepriseId = 'eae583ec-a751-47a7-8447-973c1850d593';
    
    const { data: conducteur } = await supabase
      .from('conducteurs')
      .select('id, nom, prenom')
      .eq('entreprise_id', entrepriseId)
      .order('date_inscription', { ascending: false })
      .limit(1)
      .single();

    if (!conducteur) {
      console.log('‚ùå Aucun conducteur trouv√© pour cette entreprise');
      return;
    }

    console.log(`üë§ Conducteur: ${conducteur.prenom} ${conducteur.nom}`);

    // 3. Cr√©er 3 r√©servations valid√©es dans cette p√©riode
    const baseDate = new Date(periodeEnCours.periode_debut);
    baseDate.setDate(baseDate.getDate() + 2); // 2 jours apr√®s le d√©but

    const reservations = [
      {
        conducteur_id: conducteur.id,
        client_phone: '+224620123456',
        depart_nom: 'H√¥pital Donka',
        destination_nom: 'March√© Madina',
        prix_total: 25000,
        distance_km: 8.5,
        statut: 'completed',
        code_validation: 'VAL001',
        date_code_validation: new Date(baseDate.getTime() + 1000 * 60 * 30).toISOString(),
        created_at: baseDate.toISOString(),
        commentaire: 'Test1'
      },
      {
        conducteur_id: conducteur.id,
        client_phone: '+224621234567',
        depart_nom: 'A√©roport Conakry',
        destination_nom: 'Centre ville',
        prix_total: 35000,
        distance_km: 15.2,
        statut: 'completed',
        code_validation: 'VAL002',
        date_code_validation: new Date(baseDate.getTime() + 1000 * 60 * 60 * 2).toISOString(),
        created_at: new Date(baseDate.getTime() + 1000 * 60 * 60).toISOString(),
        commentaire: 'Test2'
      },
      {
        conducteur_id: conducteur.id,
        client_phone: '+224622345678',
        depart_nom: 'Universit√© Gamal',
        destination_nom: 'Kip√©',
        prix_total: 18000,
        distance_km: 6.8,
        statut: 'completed',
        code_validation: 'VAL003',
        date_code_validation: new Date(baseDate.getTime() + 1000 * 60 * 60 * 4).toISOString(),
        created_at: new Date(baseDate.getTime() + 1000 * 60 * 60 * 3).toISOString(),
        commentaire: 'Test3'
      }
    ];

    console.log('\nüöó Ajout de 3 r√©servations valid√©es...');
    
    const { data: insertedReservations, error: reservationError } = await supabase
      .from('reservations')
      .insert(reservations)
      .select('id, client_phone, prix_total, distance_km, date_code_validation, created_at');

    if (reservationError) {
      console.log('‚ùå Erreur insertion r√©servations:', reservationError.message);
      return;
    }

    console.log('\n‚úÖ R√âSERVATIONS VALID√âES CR√â√âES:');
    insertedReservations?.forEach((r, index) => {
      console.log(`   ${index + 1}. ${r.client_phone}`);
      console.log(`      Prix: ${formatPrice(r.prix_total)} ‚Ä¢ Distance: ${r.distance_km} km`);
      console.log(`      Code valid√©: ${new Date(r.date_code_validation).toLocaleString('fr-FR')}`);
      console.log(`      ID: ${r.id.slice(0, 8)}...`);
      console.log('');
    });

    // 4. Ajouter une r√©servation NON valid√©e pour tester la s√©paration
    const reservationNonValidee = {
      conducteur_id: conducteur.id,
      client_phone: '+224623456789',
      depart_nom: 'Gare Voiture',
      destination_nom: 'Coronthie',
      prix_total: 12000,
      distance_km: 4.2,
      statut: 'completed',
      code_validation: null, // Pas de code
      date_code_validation: null, // Pas valid√©e
      created_at: new Date(baseDate.getTime() + 1000 * 60 * 60 * 5).toISOString(),
      commentaire: 'Test'
    };

    const { data: reservationNonValideeInserted } = await supabase
      .from('reservations')
      .insert([reservationNonValidee])
      .select('id, client_phone, prix_total, distance_km')
      .single();

    console.log('‚ö†Ô∏è  R√âSERVATION NON VALID√âE (test s√©paration):');
    console.log(`   ${reservationNonValideeInserted.client_phone}`);
    console.log(`   Prix: ${formatPrice(reservationNonValideeInserted.prix_total)} ‚Ä¢ Distance: ${reservationNonValideeInserted.distance_km} km`);
    console.log(`   ‚ùå Code NON valid√© - ne comptera PAS dans les commissions\n`);

    // 5. Calculs pr√©visionnels
    const totalCA = reservations.reduce((sum, r) => sum + r.prix_total, 0);
    const totalCaAvecNonValidee = totalCA + reservationNonValidee.prix_total;
    const commissionAttendue = totalCA * 0.11; // Seulement sur les valid√©es

    console.log('üí∞ PR√âVISIONS COMMISSION:');
    console.log(`   Entreprise: Moto Rapide Guin√©e`);
    console.log(`   Conducteur: ${conducteur.prenom} ${conducteur.nom}`);
    console.log(`   CA valid√© (3 r√©servations): ${formatPrice(totalCA)}`);
    console.log(`   CA total (4 r√©servations): ${formatPrice(totalCaAvecNonValidee)}`);
    console.log(`   ‚úÖ Commission calcul√©e sur: ${formatPrice(totalCA)} (uniquement valid√©es)`);
    console.log(`   üí∞ Commission attendue (11%): ${formatPrice(commissionAttendue)}`);

    console.log('\nüîç CHAMPS DATE DE CL√îTURE:');
    console.log('   ‚Ä¢ created_at: Date de cr√©ation de la p√©riode');
    console.log('   ‚Ä¢ updated_at: Date de derni√®re modification (= date cl√¥ture)');
    console.log('   üìÖ Apr√®s cl√¥ture, "updated_at" sera mis √† jour automatiquement');

    console.log('\nüöÄ PR√äT POUR LE TEST !');
    console.log('\nüìã PROC√âDURE DE TEST:');
    console.log('   1. Aller dans Super-Admin > Gestion Financi√®re');
    console.log('   2. Cliquer sur "Cl√¥turer" pour la p√©riode en cours');
    console.log('   3. V√©rifier que la commission = ' + formatPrice(commissionAttendue));
    console.log(`   4. Voir d√©tails: http://localhost:4200/super-admin/financial/periode/${periodeEnCours.id}`);
    console.log('\nüéØ DANS LA PAGE D√âTAILS:');
    console.log('   ‚Ä¢ Onglet "Valid√©es (3)" : Les 3 r√©servations avec codes');
    console.log('   ‚Ä¢ Onglet "En attente (1)" : La r√©servation sans code');
    console.log('   ‚Ä¢ Prix et distance affich√©s pour chaque r√©servation');
    console.log('   ‚Ä¢ Commission calcul√©e uniquement sur les 3 valid√©es');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

function formatPrice(amount) {
  return new Intl.NumberFormat('fr-FR', {
    style: 'currency',
    currency: 'GNF',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount || 0);
}

createPeriodAndData();