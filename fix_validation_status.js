/**
 * Script pour corriger le statut de validation 
 * 3 valid√©es + 1 non valid√©e pour tester la s√©paration
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://nmwnibzgvwltipmtwhzo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5td25pYnpndndsdGlwbXR3aHpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODY5MDMsImV4cCI6MjA2ODc2MjkwM30.cmOT0pwKr0T7DyR7FjF9lr2Aea3A3OfOytEfhi0GQ4U';

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixValidationStatus() {
  try {
    console.log('üõ†Ô∏è  Correction du statut de validation...\n');

    const entrepriseId = 'eae583ec-a751-47a7-8447-973c1850d593';
    
    const { data: conducteur } = await supabase
      .from('conducteurs')
      .select('id')
      .eq('entreprise_id', entrepriseId)
      .limit(1)
      .single();

    // R√©cup√©rer les 4 r√©servations de test
    const { data: reservations } = await supabase
      .from('reservations')
      .select('id, client_phone, prix_total, code_validation, date_code_validation')
      .eq('conducteur_id', conducteur.id)
      .order('created_at', { ascending: false })
      .limit(4);

    if (!reservations || reservations.length < 4) {
      console.log('‚ùå Pas assez de r√©servations trouv√©es');
      return;
    }

    // La premi√®re r√©servation (la plus r√©cente) sera NON valid√©e
    const reservationNonValidee = reservations[0];
    
    console.log('‚ö†Ô∏è  Mise √† jour du statut de validation...');
    
    // Retirer la validation de la premi√®re r√©servation
    const { error: updateError } = await supabase
      .from('reservations')
      .update({
        code_validation: null,
        date_code_validation: null
      })
      .eq('id', reservationNonValidee.id);

    if (updateError) {
      console.log('‚ùå Erreur:', updateError.message);
      return;
    }

    console.log('‚úÖ Statut de validation corrig√© !');
    
    // V√©rification finale
    const { data: reservationsFinales } = await supabase
      .from('reservations')
      .select('id, client_phone, prix_total, code_validation, date_code_validation')
      .eq('conducteur_id', conducteur.id)
      .order('created_at', { ascending: false })
      .limit(4);

    console.log('\nüìã R√âPARTITION FINALE:');
    
    let totalValidees = 0;
    let totalNonValidees = 0;
    let countValidees = 0;
    let countNonValidees = 0;

    reservationsFinales?.forEach((r, index) => {
      const status = r.code_validation ? '‚úÖ Valid√©e' : '‚ùå Non valid√©e';
      console.log(`   ${index + 1}. ${r.client_phone} - ${formatPrice(r.prix_total)} ${status}`);
      
      if (r.code_validation) {
        totalValidees += r.prix_total;
        countValidees++;
      } else {
        totalNonValidees += r.prix_total;
        countNonValidees++;
      }
    });

    const commissionAttendue = totalValidees * 0.11;

    console.log('\nüí∞ CALCUL COMMISSION FINAL:');
    console.log(`   üü¢ ${countValidees} r√©servations valid√©es: ${formatPrice(totalValidees)}`);
    console.log(`   üî¥ ${countNonValidees} r√©servation non valid√©e: ${formatPrice(totalNonValidees)}`);
    console.log(`   üìä Total toutes r√©servations: ${formatPrice(totalValidees + totalNonValidees)}`);
    console.log(`   üí∞ Commission calcul√©e sur: ${formatPrice(totalValidees)} (uniquement valid√©es)`);
    console.log(`   ‚úÖ Commission attendue (11%): ${formatPrice(commissionAttendue)}`);

    console.log('\nüéØ PARFAIT POUR LE TEST !');
    console.log('\nüìã DANS LA PAGE D√âTAILS P√âRIODE:');
    console.log(`   ‚Ä¢ Onglet "Valid√©es (${countValidees})" avec les r√©servations √† codes`);
    console.log(`   ‚Ä¢ Onglet "En attente (${countNonValidees})" avec la r√©servation sans code`);
    console.log('   ‚Ä¢ Prix et distance affich√©s pour chaque r√©servation');
    console.log('   ‚Ä¢ Commission calcul√©e uniquement sur les valid√©es');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

function formatPrice(amount) {
  return new Intl.NumberFormat('fr-FR', {
    style: 'currency',
    currency: 'GNF',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount || 0);
}

fixValidationStatus();