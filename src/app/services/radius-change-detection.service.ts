import { Injectable } from '@angular/core';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class RadiusChangeDetectionService {
  private lastKnownRayon: number | null = null;
  private lastKnownTestMode: boolean | null = null; // ‚úÖ NOUVEAU : Suivi du mode test

  constructor(private authService: AuthService) {}

  /**
   * V√©rifie si les r√©servations doivent √™tre recharg√©es suite √† un changement de rayon ou mode test
   * @returns true si rechargement n√©cessaire, false sinon
   */
  shouldReload(): boolean {
    const currentRayon = this.getCurrentRayon();
    const currentTestMode = this.getCurrentTestMode(); // ‚úÖ NOUVEAU
    
    if (this.lastKnownRayon === null || this.lastKnownTestMode === null) {
      // Premier appel, initialiser les r√©f√©rences
      this.lastKnownRayon = currentRayon;
      this.lastKnownTestMode = currentTestMode;
      console.log('üìä √âtat initial m√©moris√©:', currentRayon + 'km', 'TestMode:', currentTestMode);
      return false; // Pas de rechargement au premier appel
    }
    
    // V√©rifier changement de rayon
    if (currentRayon !== this.lastKnownRayon) {
      console.log(`üìä Rayon modifi√©: ${this.lastKnownRayon}km ‚Üí ${currentRayon}km`);
      this.lastKnownRayon = currentRayon;
      return true; // Rechargement n√©cessaire
    }
    
    // ‚úÖ NOUVEAU : V√©rifier changement de mode test
    if (currentTestMode !== this.lastKnownTestMode) {
      console.log(`üêõ Mode test modifi√©: ${this.lastKnownTestMode} ‚Üí ${currentTestMode}`);
      this.lastKnownTestMode = currentTestMode;
      return true; // Rechargement n√©cessaire
    }
    
    // Pas de changement
    return false;
  }

  /**
   * R√©cup√®re le rayon actuel du conducteur connect√©
   * @returns rayon en km (5 par d√©faut si non d√©fini)
   */
  private getCurrentRayon(): number {
    const conducteur = this.authService.getCurrentConducteur();
    return conducteur?.rayon_km_reservation || 5;
  }

  /**
   * ‚úÖ NOUVEAU : R√©cup√®re l'√©tat actuel du mode test
   * @returns true si mode test activ√©, false sinon
   */
  private getCurrentTestMode(): boolean {
    try {
      if (typeof Storage !== 'undefined') {
        const savedTestMode = localStorage.getItem('testMode');
        return savedTestMode ? JSON.parse(savedTestMode) : false;
      }
    } catch (error) {
      console.warn('Erreur chargement testMode dans RadiusChangeDetectionService:', error);
    }
    return false;
  }

  /**
   * Force la r√©initialisation des √©tats m√©moris√©s (utile pour les tests)
   */
  reset(): void {
    this.lastKnownRayon = null;
    this.lastKnownTestMode = null; // ‚úÖ NOUVEAU
  }
}