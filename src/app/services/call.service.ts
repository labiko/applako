import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class CallService {

  constructor() {}

  /**
   * Compose un num√©ro de t√©l√©phone
   * @param phoneNumber Num√©ro de t√©l√©phone √† composer
   */
  callPhoneNumber(phoneNumber: string): void {
    if (!phoneNumber) {
      console.warn('üìû Num√©ro de t√©l√©phone manquant');
      return;
    }

    // Nettoyer et formater le num√©ro
    const cleanNumber = this.formatPhoneNumber(phoneNumber);
    
    if (!this.isValidPhoneNumber(cleanNumber)) {
      console.warn('üìû Num√©ro de t√©l√©phone invalide:', phoneNumber);
      return;
    }

    try {
      console.log('üìû Composition du num√©ro:', cleanNumber);
      // Utilise le protocole tel: pour d√©clencher l'appel
      window.location.href = `tel:${cleanNumber}`;
    } catch (error) {
      console.error('üìû Erreur lors de la composition:', error);
    }
  }

  /**
   * Nettoie et formate le num√©ro de t√©l√©phone
   * @param phoneNumber Num√©ro brut
   * @returns Num√©ro nettoy√©
   */
  private formatPhoneNumber(phoneNumber: string): string {
    // Supprimer tous les caract√®res non num√©riques sauf le +
    let cleaned = phoneNumber.replace(/[^\d+]/g, '');
    
    // Si le num√©ro commence par 33 (sans +), ajouter le +
    if (cleaned.startsWith('33') && !cleaned.startsWith('+33')) {
      cleaned = '+' + cleaned;
    }
    
    return cleaned;
  }

  /**
   * Valide un num√©ro de t√©l√©phone
   * @param phoneNumber Num√©ro √† valider
   * @returns true si valide
   */
  private isValidPhoneNumber(phoneNumber: string): boolean {
    // V√©rifications basiques
    if (!phoneNumber || phoneNumber.length < 8) {
      return false;
    }

    // Doit commencer par + ou √™tre un num√©ro local
    if (!phoneNumber.startsWith('+') && !phoneNumber.match(/^[0-9]/)) {
      return false;
    }

    // Doit contenir uniquement des chiffres apr√®s le +
    const numberPart = phoneNumber.replace('+', '');
    return /^\d+$/.test(numberPart);
  }

  /**
   * V√©rifie si la fonction d'appel est disponible sur cette plateforme
   * @returns true si l'appel est support√©
   */
  isCallSupported(): boolean {
    // La fonction tel: est support√©e par tous les navigateurs modernes
    return typeof window !== 'undefined' && 'location' in window;
  }
}