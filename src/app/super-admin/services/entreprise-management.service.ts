/**
 * SERVICE GESTION DES ENTREPRISES SUPER-ADMIN
 * Cr√©ation, modification et gestion des entreprises
 */

import { Injectable } from '@angular/core';
import { SupabaseService } from '../../services/supabase.service';

export interface Entreprise {
  id: string;
  nom: string;
  email: string;
  telephone: string;
  adresse: string;
  siret?: string;
  responsable?: string;
  actif: boolean;
  first_login: boolean;
  is_admin: boolean;
  created_at: string;
  updated_at: string;
  password_hash?: string;
}

export interface CreateEntrepriseData {
  nom: string;
  email: string;
  telephone: string;
  adresse: string;
  siret?: string;
  responsable?: string;
}

export interface EntrepriseStats {
  total_entreprises: number;
  entreprises_actives: number;
  entreprises_inactives: number;
  nouveaux_ce_mois: number;
  total_conducteurs: number;
  total_reservations: number;
  ca_total: number;
}

@Injectable({
  providedIn: 'root'
})
export class EntrepriseManagementService {

  constructor(private supabase: SupabaseService) {}

  /**
   * R√©cup√©rer toutes les entreprises avec statistiques
   */
  async getAllEntreprises(): Promise<{ data: Entreprise[] | null, error: any }> {
    try {
      console.log('üìä R√©cup√©ration de toutes les entreprises...');

      const { data, error } = await this.supabase.client
        .from('entreprises')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      console.log(`‚úÖ ${data?.length || 0} entreprises r√©cup√©r√©es`);
      return { data, error: null };

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration entreprises:', error);
      return { data: null, error };
    }
  }

  /**
   * Cr√©er une nouvelle entreprise
   */
  async createEntreprise(entrepriseData: CreateEntrepriseData): Promise<{ data: Entreprise | null, error: any }> {
    try {
      console.log('üè¢ Cr√©ation nouvelle entreprise:', entrepriseData.nom);

      // V√©rifier si l'email existe d√©j√†
      const { data: existingEntreprise } = await this.supabase.client
        .from('entreprises')
        .select('email')
        .eq('email', entrepriseData.email)
        .single();

      if (existingEntreprise) {
        throw new Error('Une entreprise avec cet email existe d√©j√†');
      }

      // Cr√©er l'entreprise avec les valeurs par d√©faut
      const { data, error } = await this.supabase.client
        .from('entreprises')
        .insert([{
          nom: entrepriseData.nom,
          email: entrepriseData.email,
          telephone: entrepriseData.telephone,
          adresse: entrepriseData.adresse,
          siret: entrepriseData.siret || null,
          responsable: entrepriseData.responsable || null,
          actif: true,
          first_login: true,   // Valeur par d√©faut modifi√©e
          is_admin: false,     // Valeur par d√©faut demand√©e
          password_hash: null  // Pas de mot de passe initial
        }])
        .select()
        .single();

      if (error) {
        throw error;
      }

      console.log('‚úÖ Entreprise cr√©√©e avec succ√®s:', data.id);
      return { data, error: null };

    } catch (error) {
      console.error('‚ùå Erreur cr√©ation entreprise:', error);
      return { data: null, error };
    }
  }

  /**
   * R√©initialiser le mot de passe d'une entreprise
   */
  async resetEntreprisePassword(entrepriseId: string): Promise<{ success: boolean, error?: any }> {
    try {
      console.log('üîí R√©initialisation mot de passe entreprise:', entrepriseId);

      const { error } = await this.supabase.client
        .from('entreprises')
        .update({
          password_hash: null,
          first_login: true,
          updated_at: new Date().toISOString()
        })
        .eq('id', entrepriseId);

      if (error) {
        throw error;
      }

      console.log('‚úÖ Mot de passe r√©initialis√© avec succ√®s');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur r√©initialisation mot de passe:', error);
      return { success: false, error };
    }
  }

  /**
   * Activer/d√©sactiver une entreprise (m√©thode simple pour compatibilit√©)
   */
  async toggleEntrepriseStatus(entrepriseId: string, actif: boolean): Promise<{ success: boolean, error?: any }> {
    try {
      console.log(`üìä ${actif ? 'Activation' : 'D√©sactivation'} entreprise:`, entrepriseId);

      const { error } = await this.supabase.client
        .from('entreprises')
        .update({
          actif: actif,
          updated_at: new Date().toISOString()
        })
        .eq('id', entrepriseId);

      if (error) {
        throw error;
      }

      console.log(`‚úÖ Entreprise ${actif ? 'activ√©e' : 'd√©sactiv√©e'} avec succ√®s`);
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur modification statut entreprise:', error);
      return { success: false, error };
    }
  }

  /**
   * D√©sactiver une entreprise avec motif (nouveau syst√®me de blocage)
   */
  async desactiverEntrepriseAvecMotif(entrepriseId: string, motif: string, desactivePar: string): Promise<{ success: boolean, error?: any }> {
    try {
      console.log('üîí D√©sactivation entreprise avec motif:', entrepriseId);

      const { error } = await this.supabase.client
        .from('entreprises')
        .update({
          actif: false,
          motif_desactivation: motif,
          date_desactivation: new Date().toISOString(),
          desactive_par: desactivePar,
          updated_at: new Date().toISOString()
        })
        .eq('id', entrepriseId);

      if (error) {
        throw error;
      }

      console.log('‚úÖ Entreprise d√©sactiv√©e avec motif avec succ√®s');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur d√©sactivation entreprise avec motif:', error);
      return { success: false, error };
    }
  }

  /**
   * R√©activer une entreprise
   */
  async reactiverEntreprise(entrepriseId: string, reactivePar: string): Promise<{ success: boolean, error?: any }> {
    try {
      console.log('üîì R√©activation entreprise:', entrepriseId);

      const { error } = await this.supabase.client
        .from('entreprises')
        .update({
          actif: true,
          motif_desactivation: null,
          date_desactivation: null,
          desactive_par: reactivePar,
          updated_at: new Date().toISOString()
        })
        .eq('id', entrepriseId);

      if (error) {
        throw error;
      }

      console.log('‚úÖ Entreprise r√©activ√©e avec succ√®s');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur r√©activation entreprise:', error);
      return { success: false, error };
    }
  }

  /**
   * Bloquer un conducteur par super-admin
   */
  async bloquerConducteur(conducteurId: string, motif: string, raison: string, bloquePar: string): Promise<{ success: boolean, error?: any }> {
    try {
      console.log('üîí Blocage conducteur par super-admin:', conducteurId);

      const { error } = await this.supabase.client
        .from('conducteurs')
        .update({
          actif: false,
          motif_blocage: motif,
          bloque_par: 'super-admin',
          date_blocage: new Date().toISOString()
        })
        .eq('id', conducteurId);

      if (error) {
        throw error;
      }

      console.log('‚úÖ Conducteur bloqu√© avec succ√®s par super-admin');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur blocage conducteur:', error);
      return { success: false, error };
    }
  }

  /**
   * D√©bloquer un conducteur
   */
  async debloquerConducteur(conducteurId: string): Promise<{ success: boolean, error?: any }> {
    try {
      console.log('üîì D√©blocage conducteur:', conducteurId);

      const { error } = await this.supabase.client
        .from('conducteurs')
        .update({
          actif: true,
          motif_blocage: null,
          bloque_par: null,
          date_blocage: null
        })
        .eq('id', conducteurId);

      if (error) {
        throw error;
      }

      console.log('‚úÖ Conducteur d√©bloqu√© avec succ√®s');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur d√©blocage conducteur:', error);
      return { success: false, error };
    }
  }

  /**
   * R√©cup√©rer les statistiques des entreprises
   */
  async getEntreprisesStats(): Promise<{ data: EntrepriseStats | null, error: any }> {
    try {
      console.log('üìà Calcul statistiques entreprises...');

      // R√©cup√©rer toutes les entreprises
      const { data: entreprises, error: entreprisesError } = await this.supabase.client
        .from('entreprises')
        .select('*');

      if (entreprisesError) {
        throw entreprisesError;
      }

      // R√©cup√©rer le nombre de conducteurs
      const { count: totalConducteurs, error: conducteursError } = await this.supabase.client
        .from('conducteurs')
        .select('*', { count: 'exact', head: true });

      if (conducteursError) {
        throw conducteursError;
      }

      // R√©cup√©rer le nombre de r√©servations et CA total
      const { data: reservationsStats, error: reservationsError } = await this.supabase.client
        .from('reservations')
        .select('prix_total')
        .in('statut', ['completed', 'accepted']);

      if (reservationsError) {
        throw reservationsError;
      }

      // Calculer les statistiques
      const now = new Date();
      const debutMois = new Date(now.getFullYear(), now.getMonth(), 1);

      const stats: EntrepriseStats = {
        total_entreprises: entreprises?.length || 0,
        entreprises_actives: entreprises?.filter(e => e.actif).length || 0,
        entreprises_inactives: entreprises?.filter(e => !e.actif).length || 0,
        nouveaux_ce_mois: entreprises?.filter(e => new Date(e.created_at) >= debutMois).length || 0,
        total_conducteurs: totalConducteurs || 0,
        total_reservations: reservationsStats?.length || 0,
        ca_total: reservationsStats?.reduce((sum, r) => sum + (r.prix_total || 0), 0) || 0
      };

      console.log('‚úÖ Statistiques calcul√©es:', stats);
      return { data: stats, error: null };

    } catch (error) {
      console.error('‚ùå Erreur calcul statistiques:', error);
      return { data: null, error };
    }
  }

  /**
   * Modifier une entreprise
   */
  async updateEntreprise(entrepriseId: string, updateData: Partial<CreateEntrepriseData>): Promise<{ success: boolean, error?: any }> {
    try {
      console.log('üìù Modification entreprise:', entrepriseId);

      const { error } = await this.supabase.client
        .from('entreprises')
        .update({
          ...updateData,
          updated_at: new Date().toISOString()
        })
        .eq('id', entrepriseId);

      if (error) {
        throw error;
      }

      console.log('‚úÖ Entreprise modifi√©e avec succ√®s');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur modification entreprise:', error);
      return { success: false, error };
    }
  }

  /**
   * Supprimer une entreprise (soft delete)
   */
  async deleteEntreprise(entrepriseId: string): Promise<{ success: boolean, error?: any }> {
    try {
      console.log('üóëÔ∏è Suppression entreprise:', entrepriseId);

      // V√©rifier s'il y a des conducteurs li√©s
      const { data: conducteurs } = await this.supabase.client
        .from('conducteurs')
        .select('id')
        .eq('entreprise_id', entrepriseId);

      if (conducteurs && conducteurs.length > 0) {
        throw new Error(`Impossible de supprimer: ${conducteurs.length} conducteur(s) li√©(s) √† cette entreprise`);
      }

      // D√©sactiver au lieu de supprimer
      const { error } = await this.supabase.client
        .from('entreprises')
        .update({
          actif: false,
          updated_at: new Date().toISOString()
        })
        .eq('id', entrepriseId);

      if (error) {
        throw error;
      }

      console.log('‚úÖ Entreprise d√©sactiv√©e avec succ√®s');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur suppression entreprise:', error);
      return { success: false, error };
    }
  }

  /**
   * Rechercher des entreprises
   */
  async searchEntreprises(query: string): Promise<{ data: Entreprise[] | null, error: any }> {
    try {
      console.log('üîç Recherche entreprises:', query);

      const { data, error } = await this.supabase.client
        .from('entreprises')
        .select('*')
        .or(`nom.ilike.%${query}%,email.ilike.%${query}%,telephone.ilike.%${query}%`)
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      console.log(`‚úÖ ${data?.length || 0} entreprises trouv√©es`);
      return { data, error: null };

    } catch (error) {
      console.error('‚ùå Erreur recherche entreprises:', error);
      return { data: null, error };
    }
  }

  /**
   * R√©cup√©rer les conducteurs d'une entreprise
   */
  async getConducteursByEntreprise(entrepriseId: string): Promise<{ data: any[] | null, error: any }> {
    try {
      console.log('üë• R√©cup√©ration conducteurs pour entreprise:', entrepriseId);

      const { data, error } = await this.supabase.client
        .from('conducteurs')
        .select(`
          id,
          nom,
          prenom,
          telephone,
          vehicle_type,
          vehicle_marque,
          vehicle_modele,
          vehicle_couleur,
          vehicle_plaque,
          actif,
          hors_ligne,
          note_moyenne,
          nombre_courses,
          date_inscription,
          derniere_activite,
          entreprise_id
        `)
        .eq('entreprise_id', entrepriseId)
        .order('date_inscription', { ascending: false });

      if (error) {
        throw error;
      }

      console.log(`‚úÖ ${data?.length || 0} conducteur(s) trouv√©(s)`);
      return { data, error: null };

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration conducteurs:', error);
      return { data: null, error };
    }
  }

  /**
   * R√©cup√©rer les r√©servations d'un conducteur
   */
  async getReservationsByConducteur(conducteurId: string): Promise<{ data: any[] | null, error: any }> {
    try {
      console.log('üìã R√©cup√©ration r√©servations pour conducteur:', conducteurId);

      const { data, error } = await this.supabase.client
        .from('reservations')
        .select(`
          id,
          client_phone,
          vehicle_type,
          position_depart,
          depart_nom,
          destination_nom,
          statut,
          prix_total,
          distance_km,
          created_at,
          updated_at,
          code_validation,
          date_code_validation,
          commentaire,
          note_conducteur
        `)
        .eq('conducteur_id', conducteurId)
        .order('created_at', { ascending: false })
        .limit(10); // Limiter aux 10 derni√®res r√©servations

      if (error) {
        throw error;
      }

      console.log(`‚úÖ ${data?.length || 0} r√©servation(s) trouv√©e(s)`);
      return { data, error: null };

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration r√©servations:', error);
      return { data: null, error };
    }
  }
}