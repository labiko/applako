/**
 * Script pour nettoyer toutes les cl√¥tures de p√©riodes
 * Permet de refaire des tests propres
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://nmwnibzgvwltipmtwhzo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5td25pYnpndndsdGlwbXR3aHpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODY5MDMsImV4cCI6MjA2ODc2MjkwM30.cmOT0pwKr0T7DyR7FjF9lr2Aea3A3OfOytEfhi0GQ4U';

const supabase = createClient(supabaseUrl, supabaseKey);

async function cleanClosures() {
  try {
    console.log('üßπ Nettoyage des cl√¥tures de p√©riodes...\n');

    // 1. Supprimer tous les d√©tails de commissions
    console.log('1Ô∏è‚É£ Suppression des d√©tails de commissions...');
    const { error: deleteCommissionsError } = await supabase
      .from('commissions_detail')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Supprimer tout

    if (deleteCommissionsError) {
      console.log('‚ùå Erreur suppression commissions:', deleteCommissionsError.message);
    } else {
      console.log('‚úÖ D√©tails de commissions supprim√©s');
    }

    // 2. Remettre toutes les p√©riodes en statut 'en_cours'
    console.log('\n2Ô∏è‚É£ Remise √† z√©ro des p√©riodes...');
    const { data: periodes, error: getPeriodesError } = await supabase
      .from('facturation_periodes')
      .select('*');

    if (getPeriodesError) {
      console.log('‚ùå Erreur r√©cup√©ration p√©riodes:', getPeriodesError.message);
      return;
    }

    console.log(`üìã ${periodes?.length || 0} p√©riode(s) trouv√©e(s)`);

    if (periodes && periodes.length > 0) {
      // Remettre toutes les p√©riodes √† z√©ro
      const { error: updateError } = await supabase
        .from('facturation_periodes')
        .update({
          statut: 'en_cours',
          total_commissions: 0,
          total_facture: 0,
          nombre_entreprises: 0
        })
        .neq('id', '00000000-0000-0000-0000-000000000000');

      if (updateError) {
        console.log('‚ùå Erreur mise √† jour p√©riodes:', updateError.message);
      } else {
        console.log('‚úÖ Toutes les p√©riodes remises en statut "en_cours"');
      }
    }

    // 3. V√©rifier l'√©tat final
    console.log('\n3Ô∏è‚É£ V√©rification de l\'√©tat final...');
    const { data: periodesFinales } = await supabase
      .from('facturation_periodes')
      .select('*')
      .order('periode_debut', { ascending: false });

    if (periodesFinales && periodesFinales.length > 0) {
      console.log('üìä √âtat des p√©riodes apr√®s nettoyage:');
      periodesFinales.forEach((p, index) => {
        const debut = new Date(p.periode_debut).toLocaleDateString('fr-FR');
        const fin = new Date(p.periode_fin).toLocaleDateString('fr-FR');
        console.log(`  ${index + 1}. ${debut} - ${fin}: ${p.statut} (${formatPrice(p.total_commissions)})`);
      });
    }

    console.log('\n‚úÖ Nettoyage termin√© ! Vous pouvez maintenant refaire vos tests de cl√¥ture.');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

function formatPrice(amount) {
  return new Intl.NumberFormat('fr-FR', {
    style: 'currency',
    currency: 'GNF',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount || 0);
}

cleanClosures();