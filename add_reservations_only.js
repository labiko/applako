/**
 * Script pour ajouter uniquement les r√©servations de test
 * Vous pourrez ensuite annuler et re-cl√¥turer la p√©riode
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://nmwnibzgvwltipmtwhzo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5td25pYnpndndsdGlwbXR3aHpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODY5MDMsImV4cCI6MjA2ODc2MjkwM30.cmOT0pwKr0T7DyR7FjF9lr2Aea3A3OfOytEfhi0GQ4U';

const supabase = createClient(supabaseUrl, supabaseKey);

async function addReservationsOnly() {
  try {
    console.log('üöó Ajout des r√©servations de test...\n');

    const entrepriseId = 'eae583ec-a751-47a7-8447-973c1850d593';

    // 1. R√©cup√©rer le conducteur de cette entreprise
    const { data: conducteur } = await supabase
      .from('conducteurs')
      .select('id, nom, prenom')
      .eq('entreprise_id', entrepriseId)
      .limit(1)
      .single();

    if (!conducteur) {
      console.log('‚ùå Aucun conducteur trouv√© pour cette entreprise');
      return;
    }

    console.log(`üë§ Conducteur: ${conducteur.prenom} ${conducteur.nom}`);

    // 2. Utiliser une date r√©cente pour que les r√©servations soient dans la p√©riode courante
    const now = new Date();
    const baseDate = new Date(now.getTime() - 1000 * 60 * 60 * 24 * 2); // Il y a 2 jours

    // 3. Cr√©er 3 r√©servations VALID√âES
    const reservationsValidees = [
      {
        conducteur_id: conducteur.id,
        client_phone: '+224620123456',
        depart_nom: 'Donka',
        destination_nom: 'Madina',
        prix_total: 25000,
        distance_km: 8.5,
        statut: 'completed',
        code_validation: 'VAL1',
        date_code_validation: new Date(baseDate.getTime() + 1000 * 60 * 30).toISOString(),
        created_at: baseDate.toISOString()
      },
      {
        conducteur_id: conducteur.id,
        client_phone: '+224621234567',
        depart_nom: 'A√©roport',
        destination_nom: 'Centre',
        prix_total: 35000,
        distance_km: 15.2,
        statut: 'completed',
        code_validation: 'VAL2',
        date_code_validation: new Date(baseDate.getTime() + 1000 * 60 * 60 * 2).toISOString(),
        created_at: new Date(baseDate.getTime() + 1000 * 60 * 60).toISOString()
      },
      {
        conducteur_id: conducteur.id,
        client_phone: '+224622345678',
        depart_nom: 'Gamal',
        destination_nom: 'Kip√©',
        prix_total: 18000,
        distance_km: 6.8,
        statut: 'completed',
        code_validation: 'VAL3',
        date_code_validation: new Date(baseDate.getTime() + 1000 * 60 * 60 * 4).toISOString(),
        created_at: new Date(baseDate.getTime() + 1000 * 60 * 60 * 3).toISOString()
      }
    ];

    console.log('‚úÖ Ajout de 3 r√©servations VALID√âES...');
    
    const { data: validees, error: errorValidees } = await supabase
      .from('reservations')
      .insert(reservationsValidees)
      .select('id, client_phone, prix_total, distance_km, date_code_validation');

    if (errorValidees) {
      console.log('‚ùå Erreur r√©servations valid√©es:', errorValidees.message);
      return;
    }

    validees?.forEach((r, index) => {
      console.log(`   ${index + 1}. ${r.client_phone} - ${formatPrice(r.prix_total)} ‚Ä¢ ${r.distance_km} km ‚úÖ`);
    });

    // 4. Cr√©er 1 r√©servation NON VALID√âE (pour tester la s√©paration)
    const reservationNonValidee = {
      conducteur_id: conducteur.id,
      client_phone: '+224623456789',
      depart_nom: 'Gare',
      destination_nom: 'Coron',
      prix_total: 12000,
      distance_km: 4.2,
      statut: 'completed',
      code_validation: null, // PAS DE CODE
      date_code_validation: null, // PAS VALID√âE
      created_at: new Date(baseDate.getTime() + 1000 * 60 * 60 * 5).toISOString()
    };

    console.log('\n‚ö†Ô∏è  Ajout de 1 r√©servation NON VALID√âE...');
    
    const { data: nonValidee, error: errorNonValidee } = await supabase
      .from('reservations')
      .insert([reservationNonValidee])
      .select('id, client_phone, prix_total, distance_km')
      .single();

    if (errorNonValidee) {
      console.log('‚ùå Erreur r√©servation non valid√©e:', errorNonValidee.message);
    } else {
      console.log(`   1. ${nonValidee.client_phone} - ${formatPrice(nonValidee.prix_total)} ‚Ä¢ ${nonValidee.distance_km} km ‚ùå`);
    }

    // 5. R√©sum√© des calculs
    const totalValidees = reservationsValidees.reduce((sum, r) => sum + r.prix_total, 0);
    const totalToutes = totalValidees + reservationNonValidee.prix_total;
    const commissionAttendue = totalValidees * 0.11;

    console.log('\nüí∞ R√âSUM√â POUR LE TEST:');
    console.log(`   Entreprise: Moto Rapide Guin√©e`);
    console.log(`   Conducteur: ${conducteur.prenom} ${conducteur.nom}`);
    console.log(`   
   üü¢ 3 r√©servations VALID√âES: ${formatPrice(totalValidees)}
   üî¥ 1 r√©servation NON valid√©e: ${formatPrice(reservationNonValidee.prix_total)}
   üìä Total toutes r√©servations: ${formatPrice(totalToutes)}
   
   üí° COMMISSION CALCUL√âE SUR: ${formatPrice(totalValidees)} (uniquement valid√©es)
   üí∞ Commission attendue (11%): ${formatPrice(commissionAttendue)}`);

    console.log('\nüöÄ PR√äT POUR LE TEST DE CL√îTURE !');
    console.log('\nüìã PROC√âDURE:');
    console.log('   1. Aller dans Super-Admin > Gestion Financi√®re');
    console.log('   2. Si p√©riode d√©j√† cl√¥tur√©e : Cliquer "Annuler la cl√¥ture"');
    console.log('   3. Cliquer "Cl√¥turer" pour recalculer');
    console.log('   4. V√©rifier la commission = ' + formatPrice(commissionAttendue));
    console.log('   5. Voir les d√©tails avec onglets Valid√©es/En attente');

    console.log('\nüîç DANS LA PAGE D√âTAILS, VOUS DEVRIEZ VOIR:');
    console.log('   ‚Ä¢ Onglet "Valid√©es (3)" avec les r√©servations √† codes');
    console.log('   ‚Ä¢ Onglet "En attente (1)" avec la r√©servation sans code');  
    console.log('   ‚Ä¢ Prix et distance affich√©s pour chaque r√©servation');
    console.log('   ‚Ä¢ Badge info: "Ces r√©servations sont compt√©es dans les commissions"');

    // 6. V√©rifier si il y a un champ date_code_validation pour affichage
    console.log('\nüìÖ CHAMP DATE DE CL√îTURE:');
    console.log('   Dans facturation_periodes, le champ "updated_at" indique la date de cl√¥ture');
    console.log('   Il sera mis √† jour automatiquement quand vous cl√¥turerez la p√©riode');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

function formatPrice(amount) {
  return new Intl.NumberFormat('fr-FR', {
    style: 'currency',
    currency: 'GNF',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount || 0);
}

addReservationsOnly();